=============================
0.) TABLE GUIDE
=============================

TABLES

1.) users
	band_id ( INT, NOT NULL )
	email ( VARCHAR 100, NOT NULL )
	username ( VARCHAR 30, NOT NULL )
	password ( VARCHAR 30, NOT NULL)

2.) bio
	band_id ( INT, NOT NULL )
	band_name ( VARCHAR 100, NOT NULL )
	band_members ( VARCHAR 1000, NOT NULL ) 
	band_bio ( VARCHAR 10000 ) 
	band_location ( VARCHAR 100, NOT NULL )
	band_email ( VARCHAR 100, NOT NULL )
	band_facebook ( VARCHAR 100 )
	band_myspace ( VARCHAR 100 )
	band_twitter ( VARCHAR 100 )
	band_picture (VARCHAR 1000000)

3.) events
	event_id ( INT, NOT NULL )
	event_name ( VARCHAR 100, NOT NULL )
	event_location (VARCHAR 100, NOT NULL)
	event_date (DATE, YYYY-MM-DD)
	event_time (TIME, HH:MM:SS)
	event_description ( VARCHAR 10000 )
	event_price ( VARCHAR 10 )
	band_id ( INT, NOT NULL )



===============================
1.) CREATING DATABASE AND TABLES
===============================

--------------------------------------------
Create database
--------------------------------------------

CREATE DATABASE db1;
use db1;


--------------------------------------------
Create table called "users"
--------------------------------------------

CREATE TABLE users( band_id INT NOT NULL, email VARCHAR(100) NOT NULL, username VARCHAR(30) NOT NULL, password VARCHAR(30) NOT NULL);

### work in progress ###
CREATE TABLE users( band_id INT NOT NULL AUTO_INCREMENT, username VARCHAR(30) NOT NULL, password VARCHAR(30) NOT NULL, PRIMARY KEY(band_id) );
### work in progress ###


--------------------------------------------
Create table called "bio"
--------------------------------------------

CREATE TABLE bio( band_id INT NOT NULL, band_name VARCHAR(100) NOT NULL, band_members VARCHAR(1000) NOT NULL, band_bio VARCHAR(10000), band_location VARCHAR(100) NOT NULL, band_email VARCHAR(100), band_facebook VARCHAR(100), band_myspace VARCHAR(100), band_twitter VARCHAR(100), band_picture VARCHAR(1000) );

### work in progress ###
CREATE TABLE bio( band_id INT NOT NULL PRIMARY KEY REFERENCES users(band_id), band_name VARCHAR(100) NOT NULL, band_members VARCHAR(1000) NOT NULL, band_bio VARCHAR(10000), band_location VARCHAR(100) NOT NULL );
### work in progress ###


--------------------------------------------
Create table called "events"
--------------------------------------------

CREATE TABLE events( event_id INT NOT NULL, event_name VARCHAR(100) NOT NULL, event_location VARCHAR(100) NOT NULL, event_date DATE, event_time TIME, event_description VARCHAR(10000), event_price VARCHAR(10), band_id INT NOT NULL );

### work in progress ###
CREATE TABLE events( band_id INT NOT NULL PRIMARY KEY REFERENCES users(band_id), event_name VARCHAR(100) NOT NULL, event_location VARCHAR(100) NOT NULL, event_date DATE, event_time TIME );
### work in progress ###



=============================
2.) INSERT ROWS
=============================

"users"
INSERT INTO users (band_id, email, username, password) VALUES (1, 'rhcp@gmail.com', 'rhcp4', 'california');

"bio"
INSERT INTO bio (band_id, band_name, band_members, band_bio, band_location, band_email, band_facebook, band_myspace, band_twitter, band_picture) VALUES (1, 'Red Hot Chili Peppers', 'Anthony Kiedis, Flea, Josh Klinghoffer, Chad Smith', 'Bio goes here.', 'Los Angeles, CA', 'rhcp@gmail.com', 'http://www.facebook.com/ChiliPeppers', 'http://www.myspace.com/redhotchilipeppers', 'http://www.twitter.com/ChiliPeppers', 'http://images.wikia.com/music/images/3/3d/RHCP-logo.jpeg');

"events"
INSERT INTO events (event_id, event_name, event_location, event_date, event_time, event_description, event_price, band_id) VALUES (13, 'RHCP show @Lollapalooza', 'Chicago, Il', '2012-08-03', '12:30:00', 'RCHP performance at Lollapalooza', '$50.00', 1);




*If adding new users/pages and events, the best approach (given the current methods here) might be to sort "band_id"s and "event_id"s, find the highest value, and set the id of new event/user equal to (current highest id value) + 1.

*I initially tried using auto-incrementing for id values, but ran into problems. This could be worth looking into, but may not be worth the extra time. This method involves using primary and foreign keys, and in particular, I had trouble getting a series of tables to share primary keys.



=============================
3.) SAMPLE TABLES
=============================

mysql> SELECT * FROM users;
+---------+----------------+----------+------------+
| band_id | email          | username | password   |
+---------+----------------+----------+------------+
|       1 | rhcp@gmail.com | rhcp4    | california |
+---------+----------------+----------+------------+
1 row in set (0.00 sec)


mysql> SELECT * FROM bio;
+---------+-----------------------+----------------------------------------------------+----------------+-----------------+----------------+--------------------------------------+-------------------------------------------+-------------------------------------+----------------------------------------------------------+
| band_id | band_name             | band_members                                       | band_bio       | band_location   | band_email     | band_facebook                        | band_myspace                              | band_twitter                        | band_picture                                             |
+---------+-----------------------+----------------------------------------------------+----------------+-----------------+----------------+--------------------------------------+-------------------------------------------+-------------------------------------+----------------------------------------------------------+
|       1 | Red Hot Chili Peppers | Anthony Kiedis, Flea, Josh Klinghoffer, Chad Smith | Bio goes here. | Los Angeles, CA | rhcp@gmail.com | http://www.facebook.com/ChiliPeppers | http://www.myspace.com/redhotchilipeppers | http://www.twitter.com/ChiliPeppers | http://images.wikia.com/music/images/3/3d/RHCP-logo.jpeg |
+---------+-----------------------+----------------------------------------------------+----------------+-----------------+----------------+--------------------------------------+-------------------------------------------+-------------------------------------+----------------------------------------------------------+
1 row in set (0.00 sec)


mysql> SELECT * FROM events;
+----------+-------------------------+----------------+------------+------------+----------------------------------+-------------+---------+
| event_id | event_name              | event_location | event_date | event_time | event_description                | event_price | band_id |
+----------+-------------------------+----------------+------------+------------+----------------------------------+-------------+---------+
|       13 | RHCP show @Lollapalooza | Chicago, Il    | 2012-08-03 | 12:30:00   | RCHP performance at Lollapalooza | $50.00      |       1 |
+----------+-------------------------+----------------+------------+------------+----------------------------------+-------------+---------+
1 row in set (0.00 sec)



